What happens when you initialize a repository? Why do you need to do it?
It creates a hidden directory where git stores all of the commits and files
needed by git. Initiating a repository is the only way to start making commits.

How is the staging area different from the working directory and the
repository? What value do you think it offers?
Repository contains saved commits. Working directory contains all the current
files in the project. The staging area allows you to select which files in the
working dir you want to make commits from. It allows you to be more precise
in which files to make commits from.

How can you use the staging area to make sure you have one commit per logical
change?
You can run git --staged to compare the files in the staging area to the most
recent commit, making sure there is only one logical change before committing.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches are helpful when testing new features or creating different versions
of the current commit, without losing the current commit.

How do the diagrams help you visualize the branch structure?
You can see the full connections of each branch and identify where they
diverge/merge all in one glance.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
It combines the additions or subtractions from both branches in relation to
the parent commit for both branches. Merging branches uses the checked out
branch as the head of the merge, so drawing a converging point from all
merged branches makes sense.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
Automatic merging saves a little time when git is 100% sure the merge wont
break anything. Referring to the user under any doubt allows the user to
easily look directly at any conflicts and address them on the spot, vs sifting
through the code and trying to find the differences after git merges it anyway.
